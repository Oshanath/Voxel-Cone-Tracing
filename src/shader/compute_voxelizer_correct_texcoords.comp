#version 450
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_debug_printf : enable

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Vertex {
    vec4 position;
    vec4 texcoord;
    vec4 normal;
    vec4 tangent;
    vec4 bitangent;
};

layout(set = 0, binding = 0, rgba8) uniform image3D voxelTexture;

layout (set = 1, binding = 0) uniform PerFrameUBO 
{	
	mat4 view;
	mat4 projection;
	vec4 aabb_min;
	vec4 aabb_max;
} ubo;

layout (set = 2, binding = 0) uniform ViewProjUBO 
{	
	mat4 view;
	mat4 proj;
} view_proj;

layout(set = 3, binding = 0) buffer VertexBuffer {
    Vertex vertices[];
};

layout(set = 3, binding = 1) buffer IndexBuffer {
    uint indices[];
};

layout (set = 4, binding = 0) uniform sampler2D s_Diffuse_unbound[];
layout (set = 4, binding = 1) uniform sampler2D s_Normal_unbound[];
layout (set = 4, binding = 2) uniform sampler2D s_Metallic_unbound[];
layout (set = 4, binding = 3) uniform sampler2D s_Roughness_unbound[];
layout (set = 4, binding = 4) uniform sampler2D s_Emissive_unbound[];

layout(set = 5, binding = 0) buffer TriangleMap {
    uint triangle_map[];
};

layout( push_constant ) uniform constants
{
	mat4 model;
    int triangle_count;
} pc;

bool test_axis(vec3 axis, vec3 u0, vec3 u1, vec3 u2, float extent){
    vec3 A0 = vec3(1.0, 0.0, 0.0);
    vec3 A1 = vec3(0.0, 1.0, 0.0);
    vec3 A2 = vec3(0.0, 0.0, 1.0);

    float p0 = dot(axis, u0);
    float p1 = dot(axis, u1);
    float p2 = dot(axis, u2);
    float R = extent * (abs(dot(A0, axis)) + abs(dot(A1, axis)) + abs(dot(A2, axis)));
    return (min(min(p0, p1), p2) > R || max(max(p0, p1), p2) < -R);
}

bool voxel_triangle_collision_test(vec3 u0, vec3 u1, vec3 u2, ivec3 voxel, float voxel_width, vec3 voxel_grid_min){
    
    float a = voxel_width / 2.0;    // extent
    vec3 e0 = u1 - u0;              // edge 1
    vec3 e1 = u2 - u1;              // edge 2
    vec3 e2 = u2 - u0;              // edge 3
    vec3 n = cross(e0, e1);         // normal
    vec3 c = voxel_grid_min + vec3(voxel) * voxel_width + vec3(a);  // voxel center
    vec3 d = u0 - c;                // vector from triangle to voxel center
    vec3 A0 = vec3(1.0, 0.0, 0.0);
    vec3 A1 = vec3(0.0, 1.0, 0.0);
    vec3 A2 = vec3(0.0, 0.0, 1.0);

    u0 -= c;
    u1 -= c;
    u2 -= c;

    if (test_axis(A0, u0, u1, u2, a)) return false;
    if (test_axis(A1, u0, u1, u2, a)) return false;
    if (test_axis(A2, u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A0, e0)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A0, e1)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A0, e2)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A1, e0)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A1, e1)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A1, e2)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A2, e0)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A2, e1)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(cross(A2, e2)), u0, u1, u2, a)) return false;
    if (test_axis(normalize(n), u0, u1, u2, a)) return false;
    return true;
}

vec3 get_barycentric_coordinates(vec3 a, vec3 b, vec3 c, vec3 p)
{
	vec3 ab = b - a;
	vec3 ac = c - a;
	vec3 ap = p - a;

	float d00 = dot(ab, ab);
	float d01 = dot(ab, ac);
	float d11 = dot(ac, ac);
	float d20 = dot(ap, ab);
	float d21 = dot(ap, ac);

	float denom = d00 * d11 - d01 * d01;

	float v = (d11 * d20 - d01 * d21) / denom;
	float w = (d00 * d21 - d01 * d20) / denom;
	float u = 1.0f - v - w;

	return vec3(u, v, w);
}

vec3 find_closest_point_on_line(vec3 a, vec3 b, vec3 p)
{
	vec3 ab = b - a;
	float t = dot(p - a, ab) / dot(ab, ab);
	return a + t * ab;
}

vec3 get_closest_position(vec3 a, vec3 b, vec3 c, vec3 p)
{
    vec3 ab = b - a;
    vec3 ac = c - a;
    vec3 normal = normalize(cross(ab, ac));
    vec3 ap = p - a;

    float dist = dot(ap, normal);
    vec3 planar_point = p - dist * normal;

    // check whether planar point is inside or outside the triangle
    vec3 barycentric = get_barycentric_coordinates(a, b, c, planar_point);
    if (barycentric.x >= 0.0f && barycentric.y >= 0.0f && barycentric.z >= 0.0f)
        return planar_point;

    // find the closest point on the edges
    vec3 closest_point_edge_1 = find_closest_point_on_line(a, b, planar_point);
    vec3 closest_point_edge_2 = find_closest_point_on_line(b, c, planar_point);
    vec3 closest_point_edge_3 = find_closest_point_on_line(c, a, planar_point);

    // find the distance to the closest point on the edges
    float dist_edge_1 = distance(planar_point, closest_point_edge_1);
    float dist_edge_2 = distance(planar_point, closest_point_edge_2);
    float dist_edge_3 = distance(planar_point, closest_point_edge_3);

    vec3 vertex_1_of_closest_edge, vertex_2_of_closest_edge, closest_point_to_edge;

    // find the vertices of the closest edge
    if (dist_edge_1 < dist_edge_2 && dist_edge_1 < dist_edge_3)
    {
		vertex_1_of_closest_edge = a;
		vertex_2_of_closest_edge = b;
        closest_point_to_edge    = closest_point_edge_1;
	}
    else if (dist_edge_2 < dist_edge_1 && dist_edge_2 < dist_edge_3)
    {
		vertex_1_of_closest_edge = b;
		vertex_2_of_closest_edge = c;
        closest_point_to_edge = closest_point_edge_2;
	}
    else
    {
		vertex_1_of_closest_edge = c;
		vertex_2_of_closest_edge = a;
        closest_point_to_edge = closest_point_edge_3;
	}

    if (dot(vertex_1_of_closest_edge - closest_point_to_edge, vertex_2_of_closest_edge - closest_point_to_edge) < 0.0f)
    {
        return closest_point_to_edge;
    }

    // find the closest vertex from vertex_1_of_closest_edge and vertex_2_of_closest_edge
    float dist_vertex_1 = distance(planar_point, vertex_1_of_closest_edge);
    float dist_vertex_2 = distance(planar_point, vertex_2_of_closest_edge);

    if (dist_vertex_1 < dist_vertex_2)
    {
		return vertex_1_of_closest_edge;
	}
    else
    {
		return vertex_2_of_closest_edge;
	}
    
}

void main()
{
    uint index = gl_GlobalInvocationID.x;

    if (index >= pc.triangle_count)
	{
		return;
	}
    
    #define vertex1 vertices[indices[index * 3]]
    #define vertex2 vertices[indices[index * 3 + 1]]
    #define vertex3 vertices[indices[index * 3 + 2]]

    uint texture_index = triangle_map[index];

    vec3 _min = ubo.aabb_min.xyz;
	vec3 _max = ubo.aabb_max.xyz;
    int voxels_per_side = imageSize(voxelTexture).x;
    float voxel_width = (_max.x - _min.x) / float(voxels_per_side);

    vec4 vertex1_world = pc.model * vertex1.position;
    vec4 vertex2_world = pc.model * vertex2.position;
    vec4 vertex3_world = pc.model * vertex3.position;
    
    ivec3 vertex1_voxel = ivec3((vertex1_world.xyz - _min) / voxel_width);
    ivec3 vertex2_voxel = ivec3((vertex2_world.xyz - _min) / voxel_width);
    ivec3 vertex3_voxel = ivec3((vertex3_world.xyz - _min) / voxel_width);

    // Check if the triangle is outside the voxel grid
	if (vertex1_world.x < _min.x || vertex1_world.x > _max.x) return;
    if (vertex1_world.y < _min.y || vertex1_world.y > _max.y) return;
    if (vertex1_world.z < _min.z || vertex1_world.z > _max.z) return;
    if (vertex2_world.x < _min.x || vertex2_world.x > _max.x) return;
    if (vertex2_world.y < _min.y || vertex2_world.y > _max.y) return;
    if (vertex2_world.z < _min.z || vertex2_world.z > _max.z) return;
    if (vertex3_world.x < _min.x || vertex3_world.x > _max.x) return;
    if (vertex3_world.y < _min.y || vertex3_world.y > _max.y) return;
    if (vertex3_world.z < _min.z || vertex3_world.z > _max.z) return;

    // Loop over the voxels in the bounding box of the triangle
    for(uint i = min(min(vertex1_voxel.x, vertex2_voxel.x), vertex3_voxel.x); i <= max(max(vertex1_voxel.x, vertex2_voxel.x), vertex3_voxel.x); i++){
        for(uint j = min(min(vertex1_voxel.y, vertex2_voxel.y), vertex3_voxel.y); j <= max(max(vertex1_voxel.y, vertex2_voxel.y), vertex3_voxel.y); j++){
            for(uint k = min(min(vertex1_voxel.z, vertex2_voxel.z), vertex3_voxel.z); k <= max(max(vertex1_voxel.z, vertex2_voxel.z), vertex3_voxel.z); k++){
                
                if (voxel_triangle_collision_test(vertex1_world.xyz, vertex2_world.xyz, vertex3_world.xyz, ivec3(i, j, k), voxel_width, _min)){
                    
                    vec3 voxel_center = _min + vec3(i, j, k) * voxel_width + vec3(voxel_width / 2.0);
                    vec3 closest_point = get_closest_position(vertex1_world.xyz, vertex2_world.xyz, vertex3_world.xyz, voxel_center);
                    vec3 barycentric = get_barycentric_coordinates(vertex1_world.xyz, vertex2_world.xyz, vertex3_world.xyz, closest_point);

                    //vec2 texcoord = (vertex1.texcoord.xy + vertex2.texcoord.xy + vertex3.texcoord.xy) / 3.0;
                    vec2 texcoord = vec2(barycentric.x * vertex1.texcoord.x + barycentric.y * vertex2.texcoord.x + barycentric.z * vertex3.texcoord.x,
                                         barycentric.x * vertex1.texcoord.y + barycentric.y * vertex2.texcoord.y + barycentric.z * vertex3.texcoord.y);
                    
                    vec3 diffuse = texture(s_Diffuse_unbound[texture_index], texcoord).xyz;
                    //const vec4 current_voxel_value = imageLoad(voxelTexture, ivec3(i, j, k));
                    // const vec4 voxel_value = vec4(current_voxel_value.xyz + diffuse, current_voxel_value.w + 1.0);
                    const vec4 voxel_value = vec4(diffuse, 1.0);
                    imageStore(voxelTexture, ivec3(i, j, k), voxel_value);
                }
            }
        }
    }
    
}
