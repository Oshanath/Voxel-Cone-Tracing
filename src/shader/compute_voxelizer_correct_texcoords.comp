#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_debug_printf : enable

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

#include "compute_voxelizer_common.h"

void main()
{
    uint index = gl_GlobalInvocationID.x;

    if (index >= pc.triangle_count)
	{
		return;
	}
    
    #define vertex1 vertices[indices[index * 3]]
    #define vertex2 vertices[indices[index * 3 + 1]]
    #define vertex3 vertices[indices[index * 3 + 2]]

    uint texture_index = triangle_map[index];

    vec3 _min = ubo.aabb_min.xyz;
	vec3 _max = ubo.aabb_max.xyz;
    int voxels_per_side = imageSize(voxelTexture).x;
    float voxel_width = (_max.x - _min.x) / float(voxels_per_side);

    vec4 vertex1_world = pc.model * vertex1.position;
    vec4 vertex2_world = pc.model * vertex2.position;
    vec4 vertex3_world = pc.model * vertex3.position;
    
    ivec3 vertex1_voxel = ivec3((vertex1_world.xyz - _min) / voxel_width);
    ivec3 vertex2_voxel = ivec3((vertex2_world.xyz - _min) / voxel_width);
    ivec3 vertex3_voxel = ivec3((vertex3_world.xyz - _min) / voxel_width);

    // Check if the triangle is outside the voxel grid
	if (vertex1_world.x < _min.x || vertex1_world.x > _max.x) return;
    if (vertex1_world.y < _min.y || vertex1_world.y > _max.y) return;
    if (vertex1_world.z < _min.z || vertex1_world.z > _max.z) return;
    if (vertex2_world.x < _min.x || vertex2_world.x > _max.x) return;
    if (vertex2_world.y < _min.y || vertex2_world.y > _max.y) return;
    if (vertex2_world.z < _min.z || vertex2_world.z > _max.z) return;
    if (vertex3_world.x < _min.x || vertex3_world.x > _max.x) return;
    if (vertex3_world.y < _min.y || vertex3_world.y > _max.y) return;
    if (vertex3_world.z < _min.z || vertex3_world.z > _max.z) return;

    uint min_x = min(min(vertex1_voxel.x, vertex2_voxel.x), vertex3_voxel.x);
    uint min_y = min(min(vertex1_voxel.y, vertex2_voxel.y), vertex3_voxel.y);
    uint min_z = min(min(vertex1_voxel.z, vertex2_voxel.z), vertex3_voxel.z);
    uint max_x = max(max(vertex1_voxel.x, vertex2_voxel.x), vertex3_voxel.x);
    uint max_y = max(max(vertex1_voxel.y, vertex2_voxel.y), vertex3_voxel.y);
    uint max_z = max(max(vertex1_voxel.z, vertex2_voxel.z), vertex3_voxel.z);

    uint x_dim = max_x - min_x + 1;
    uint y_dim = max_y - min_y + 1;
    uint z_dim = max_z - min_z + 1;

    #define LARGE_TRIANGLE_VOXEL_THRESHOLD 32

    // Loop over the voxels in the bounding box of the triangle
    if (x_dim * y_dim * z_dim < LARGE_TRIANGLE_VOXEL_THRESHOLD)
    {
        for(uint i = min_x; i <= max_x; i++){
            for(uint j = min_y; j <= max_y; j++){
                for(uint k = min_z; k <= max_z; k++){
                
                    if (voxel_triangle_collision_test(vertex1_world.xyz, vertex2_world.xyz, vertex3_world.xyz, ivec3(i, j, k), voxel_width, _min)){
                    
                        vec3 voxel_center = _min + vec3(i, j, k) * voxel_width + vec3(voxel_width / 2.0);
                        vec3 closest_point = get_closest_position(vertex1_world.xyz, vertex2_world.xyz, vertex3_world.xyz, voxel_center);
                        vec3 barycentric = get_barycentric_coordinates(vertex1_world.xyz, vertex2_world.xyz, vertex3_world.xyz, closest_point);

                        vec2 texcoord = vec2(barycentric.x * vertex1.texcoord.x + barycentric.y * vertex2.texcoord.x + barycentric.z * vertex3.texcoord.x,
                                                barycentric.x * vertex1.texcoord.y + barycentric.y * vertex2.texcoord.y + barycentric.z * vertex3.texcoord.y);
                    
                        vec3 diffuse = texture(s_Diffuse_unbound[texture_index], texcoord).xyz;
                        const vec4 voxel_value = vec4(diffuse, 1.0);
                        imageStore(voxelTexture, ivec3(i, j, k), voxel_value);
                    }
                }
            }
        }
    }
    else{
        uint large_triangle_index = atomicAdd(command.x, 1);
        large_triangle_indices[large_triangle_index] = index;
    }
    
}
